from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from lask_jwt_extendedf import JWTManager, create_access_token, get_jwt_identity, jwt_required

migrate = Migrate()
# jwt = jwt_manager()   

app = Flask(__name__)
app.config['TESTING'] = True
app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://poojan:Poojan@localhost/market"
app.config['JWT_SECRET_KEY'] = 'secret'
db = SQLAlchemy()
db.init_app(app)
migrate.init_app(app,db)
jwt = JWTManager(app)


class Users(db.Model):
    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), nullable=False, unique=True)
    password = db.Column(db.String(50))

    def save(self):
        db.session.add(self)
        db.session.commit()
    
    def delete():
        pass

    def to_dict(user_object):
        return {"id": user_object.id, "username": user_object.username}

    def __repr__(self):
        return f'<id {self.username}>'

class Items(db.Model):
    __tablename__ = "items"

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)

    def to_dict(item_object):
        return {"id": item_object.id, "name": item_object.name}

@app.route('/signup', methods=['POST'])
def signup():
   
    request_data = request.json
    username = request_data.get('username')
    password = request_data.get('password')

    if not username or not password:
        return {'error': 'Username and password are required'}, 400

    # user = User.query.filter_by(username=username).first()
    user = Users.query.filter_by(username=username).first()
    if user:
        return {'error': 'Username already exists'}, 400

    user = Users(username=username, password=password)
    db.session.add(user)
    db.session.commit()

    return {'message': 'User created successfully'}, 201

@app.route('/login', methods=["POST"])
def login():
    request_data = request.json
    username = request_data.get('username')
    password = request_data.get('password')

    user = Users.query.filter_by(username=username).first()
    if not user.password == password:
        return jsonify({"error":"invalid credentials"}), 401
    
    access_token = create_access_token(identity=user.to_dict())
    return jsonify({"message" : "login successfull", "access_token" : access_token}), 200

@app.route("/users", methods=["GET"])
@app.route('/users/<string:id>', methods=["GET"])
@jwt_required()
def fetch_all_users(id=0):
    user = get_jwt_identity()
    print(user)
    if id != 0:
        user = Users.query.get(id)
        return jsonify({"user": user.to_dict()}), 200
    users = Users.query.all()
    
    for user in range(len(users)):
        users[user] = users[user].to_dict()
    
    return jsonify({"users": users}), 200


if __name__ == "__main__":
    app.run()